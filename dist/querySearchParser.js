// Generated by CoffeeScript 1.12.7
(function() {
  var QuerySearchParser, _, searchQuery,
    hasProp = {}.hasOwnProperty;

  searchQuery = require('search-query-parser');

  _ = require('lodash');

  QuerySearchParser = (function() {
    function QuerySearchParser() {}

    QuerySearchParser.parse = function(syntaxSearch, config) {
      var key, newKey, newValue, parseResult, value;
      parseResult = searchQuery.parse(syntaxSearch, this._toOptions(config));
      delete parseResult.text;
      for (key in parseResult) {
        if (!hasProp.call(parseResult, key)) continue;
        value = parseResult[key];
        if (_.isArray(value)) {
          for (newKey in value) {
            if (!hasProp.call(value, newKey)) continue;
            newValue = value[newKey];
            parseResult[key][newKey] = this._replace(newValue);
          }
        } else {
          parseResult[key] = this._replace(value);
        }
        _.remove(parseResult[key], _.isEmpty);
        if (parseResult[key].length === 0) {
          delete parseResult[key];
        }
      }
      return parseResult;
    };

    QuerySearchParser._toOptions = function(config) {
      var key, options, value;
      options = {
        keywords: (function() {
          var ref, results;
          ref = config.search;
          results = [];
          for (key in ref) {
            if (!hasProp.call(ref, key)) continue;
            value = ref[key];
            results.push(key);
          }
          return results;
        })()
      };
      return options;
    };

    QuerySearchParser._replace = function(value) {
      if (_.isString(value)) {
        return value.replace(/\*/g, '%');
      }
    };

    QuerySearchParser.validate = function(whereObject, config) {
      var errors, i, key, len, ref, value;
      errors = [];
      for (key in whereObject) {
        if (config.search && config.search[key] && config.search[key].pattern) {
          if (!whereObject[key].match(config.search[key].pattern)) {
            errors.push({
              property: key,
              message: "must match " + config.search[key].pattern
            });
          }
        }
        if (config.search && config.search[key] && config.search[key].orWhere) {
          if (!_.isArray(config.search[key].orWhere)) {
            errors.push({
              property: key,
              message: "property orWhere must be an array"
            });
          } else {
            ref = config.search[key].orWhere;
            for (i = 0, len = ref.length; i < len; i++) {
              value = ref[i];
              if (!(value.table && value.column)) {
                errors.push({
                  property: value,
                  message: "invalid orWhere configuration, must have table and column"
                });
              }
            }
          }
        }
      }
      return {
        isValid: _.isEmpty(errors),
        errors: errors
      };
    };

    return QuerySearchParser;

  })();

  module.exports = QuerySearchParser;

}).call(this);
